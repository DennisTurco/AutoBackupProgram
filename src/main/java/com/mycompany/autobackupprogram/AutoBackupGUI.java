package com.mycompany.autobackupprogram;

import com.formdev.flatlaf.FlatIntelliJLaf;
import java.awt.Color;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import table.TableActionCellEditor;
import table.TableActionCellRender;
import table.TableActionEvent;

/**
 * @author Dennis Turco
 */
public class AutoBackupGUI extends javax.swing.JFrame {
    
    public static final String INFO_FILE_STRING = "info.json";
    public static final String NEXT_BACKUP_FILE_STRING = "next_backup.json";
    public static final String BACKUP_FILE_STRING = "backup_list.json";
    public static final String INFO_FILE_DIRECTORY_STRING = "src/main/resources/res/";
    public static final String SAVES_DIRECTORY_STRING = "src/main/resources/res/saves/";    

    static String currentFileOpened;
    static String nextDateBackup;
    static Integer daysIntervalBackup;
    static boolean autoBackupOption;
    
    private final List<Backup> backups;
    private static JSONAutoBackup JSON;
    private static TimerAutoBackup threadTimer;
    private static DefaultTableModel model;

    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    private static final DateTimeFormatter formatterLastBackup = DateTimeFormatter.ofPattern("yyyy-MM-dd hh:mm:ss a");
    private static LocalDate dateNow;

    public AutoBackupGUI() {
        initComponents();
        
        // logo application
        Image icon = new ImageIcon(this.getClass().getResource("/res/img/logo.png")).getImage();
        this.setIconImage(icon);
        
        JSON = new JSONAutoBackup(this);
        
        backups = JSON.ReadBackupListFromJSON(BACKUP_FILE_STRING, INFO_FILE_DIRECTORY_STRING);
        
        displayBackupList(backups);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        txtTitle = new javax.swing.JLabel();
        currentFileLabel = new javax.swing.JLabel();
        startPathField = new javax.swing.JTextField();
        btnPathSearch1 = new javax.swing.JButton();
        destinationPathField = new javax.swing.JTextField();
        btnPathSearch2 = new javax.swing.JButton();
        lastBackupLabel = new javax.swing.JLabel();
        SingleBackup = new javax.swing.JButton();
        messageLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        AutoBackupPreference = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MenuNew = new javax.swing.JMenuItem();
        MenuOpen = new javax.swing.JMenuItem();
        MenuSave = new javax.swing.JMenuItem();
        MenuSaveWithName = new javax.swing.JMenuItem();
        MenuRemove = new javax.swing.JMenuItem();
        MenuClear = new javax.swing.JMenuItem();
        MenuHistory = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        MenuShare = new javax.swing.JMenuItem();
        MenuHelp = new javax.swing.JMenuItem();
        MenuCredits = new javax.swing.JMenuItem();
        MenuQuit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        txtTitle.setLabelFor(txtTitle);
        txtTitle.setText("Auto Backup Program");
        txtTitle.setToolTipText("");
        txtTitle.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        currentFileLabel.setText("Current file: ");

        startPathField.setToolTipText("Start Path");
        startPathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPathFieldActionPerformed(evt);
            }
        });

        btnPathSearch1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/img/folder.png"))); // NOI18N
        btnPathSearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPathSearch1ActionPerformed(evt);
            }
        });

        destinationPathField.setToolTipText("Destination Path");
        destinationPathField.setActionCommand("<Not Set>");
        destinationPathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationPathFieldActionPerformed(evt);
            }
        });

        btnPathSearch2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/img/folder.png"))); // NOI18N
        btnPathSearch2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPathSearch2ActionPerformed(evt);
            }
        });

        lastBackupLabel.setText("last backup: ");

        SingleBackup.setBackground(new java.awt.Color(51, 153, 255));
        SingleBackup.setForeground(new java.awt.Color(255, 255, 255));
        SingleBackup.setText("Single Backup");
        SingleBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SingleBackupActionPerformed(evt);
            }
        });

        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        messageLabel.setToolTipText("");
        messageLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        progressBar.setToolTipText("Percentage");

        AutoBackupPreference.setText("Automatic Backup");
        AutoBackupPreference.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                AutoBackupPreferenceStateChanged(evt);
            }
        });
        AutoBackupPreference.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AutoBackupPreferenceMouseReleased(evt);
            }
        });
        AutoBackupPreference.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoBackupPreferenceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(currentFileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(319, 319, 319)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SingleBackup, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AutoBackupPreference, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(233, 233, 233)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTitle)
                                    .addComponent(lastBackupLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(startPathField, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnPathSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(destinationPathField, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnPathSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 234, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(currentFileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startPathField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPathSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(destinationPathField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastBackupLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SingleBackup, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AutoBackupPreference)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnPathSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        TabbedPane.addTab("AutoBackup", jPanel1);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Filename", "Initial path", "Destination path", "Last backup", "Auto backup", "Actions"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(50);
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 819, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
        );

        TabbedPane.addTab("BackupList", jPanel2);

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        MenuNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuNew.setText("new");
        MenuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuNewActionPerformed(evt);
            }
        });
        jMenu1.add(MenuNew);

        MenuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuOpen.setText("open");
        MenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(MenuOpen);

        MenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuSave.setText("save");
        MenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(MenuSave);

        MenuSaveWithName.setText("save with name");
        MenuSaveWithName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSaveWithNameActionPerformed(evt);
            }
        });
        jMenu1.add(MenuSaveWithName);

        MenuRemove.setText("remove");
        MenuRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuRemoveActionPerformed(evt);
            }
        });
        jMenu1.add(MenuRemove);

        MenuClear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuClear.setText("clear");
        MenuClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuClearActionPerformed(evt);
            }
        });
        jMenu1.add(MenuClear);

        MenuHistory.setText("history");
        MenuHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuHistoryActionPerformed(evt);
            }
        });
        jMenu1.add(MenuHistory);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");

        MenuShare.setText("share");
        MenuShare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuShareActionPerformed(evt);
            }
        });
        jMenu2.add(MenuShare);

        MenuHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        MenuHelp.setText("help");
        MenuHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuHelpActionPerformed(evt);
            }
        });
        jMenu2.add(MenuHelp);

        MenuCredits.setText("credits");
        MenuCredits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuCreditsActionPerformed(evt);
            }
        });
        jMenu2.add(MenuCredits);

        MenuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        MenuQuit.setText("quit");
        MenuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuQuitActionPerformed(evt);
            }
        });
        jMenu2.add(MenuQuit);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void displayBackupList(List<Backup> backups) {
        model = new DefaultTableModel(new Object[]{"Filename", "Initial path", "Destination path", "Last backup", "Auto backup", "Actions"}, 0) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 4) {
                    return Boolean.class;
                }
                return super.getColumnClass(columnIndex);
            }
        };
        table.setModel(model);

        for (int i = 0; i < backups.size(); i++) {
            Backup backup = backups.get(i);

            // Add rows if necessary
            if (i >= model.getRowCount()) {
                model.addRow(new Object[]{"", "", "", "", ""});
            }

            // Set values for each cell
            model.setValueAt(backup.getFilename(), i, 0);
            model.setValueAt(backup.getInitialPath(), i, 1);
            model.setValueAt(backup.getDestinationPath(), i, 2);
            model.setValueAt(backup.getLastBackup(), i, 3);
            model.setValueAt(backup.isAutoBackup(), i, 4);
            model.setValueAt("Actions", i, 5); // Placeholder for actions
        }
        
        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onEdit(int row) {
                System.out.println("Edit row : " + row);
                
                currentFileOpened = backups.get(row).getFilename();
                OpenFile();
                TabbedPane.setSelectedIndex(0);
            }

            @Override
            public void onDelete(int row) {
                if (table.isEditing()) {
                    table.getCellEditor().stopCellEditing();
                }
                
                int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this item? Please note, this action cannot be undone", "Confimation required", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (response == JOptionPane.YES_OPTION) {
                    RemoveBackupFile(backups.get(row).getFilename());
                    DefaultTableModel model = (DefaultTableModel) table.getModel();
                    model.removeRow(row);
                }
            }
        };
        table.getColumnModel().getColumn(5).setCellRenderer(new TableActionCellRender());
        table.getColumnModel().getColumn(5).setCellEditor(new TableActionCellEditor(event));
        table.getColumnModel().getColumn(0).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable jtable, Object o, boolean bln, boolean bln1, int i, int i1) {
                setHorizontalAlignment(SwingConstants.RIGHT);
                return super.getTableCellRendererComponent(jtable, o, bln, bln1, i, i1);
            }
        });
    }
    
    private void updateTableWithNewBackupList(List<Backup> updatedBackups) {
        // Cancella tutte le righe esistenti
        model.setRowCount(0);

        // Reinserisci i backup aggiornati
        for (Backup backup : updatedBackups) {
            model.addRow(new Object[]{
                backup.getFilename(),
                backup.getInitialPath(),
                backup.getDestinationPath(),
                backup.getLastBackup(),
                backup.isAutoBackup(),
                "Actions"
            });
        }
}
    
    private void MenuShareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuShareActionPerformed
        System.out.println("Event --> share");

        // pop-up message
        JOptionPane.showMessageDialog(null, "Share link copied to clipboard!");

        // copy link to the clipboard
        String testString = "https://github.com/DennisTurco/AutoBackup-Installer";
        StringSelection stringSelectionObj = new StringSelection(testString);
        Clipboard clipboardObj = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboardObj.setContents(stringSelectionObj, null);
    }//GEN-LAST:event_MenuShareActionPerformed

    private void MenuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuQuitActionPerformed
        System.out.println("Event --> exit");
        System.exit(EXIT_ON_CLOSE);
    }//GEN-LAST:event_MenuQuitActionPerformed

    private void MenuHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuHelpActionPerformed
        System.out.println("Event --> help");
        ImageIcon icon = new ImageIcon("/img/info.png");
        JOptionPane.showMessageDialog(null,
                        "For questions please contact the author: -> dennisturco.github.io",
                        "Help",
                        JOptionPane.PLAIN_MESSAGE, icon);
    }//GEN-LAST:event_MenuHelpActionPerformed

    private void MenuCreditsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuCreditsActionPerformed
        System.out.println("Event --> credits");
        ImageIcon icon = new ImageIcon(".//res//author_logo.png");
        JOptionPane.showMessageDialog(null, """
                                            <html><u>2022 e' Dennis Turco</u></html>\r
                                            <html><i>Author</i>: Dennis Turco</html>\r
                                            <html><i>GitHub</i>: <a href='https://github.com/DennisTurco'>https://github.com/DennisTurco </a></html>\r
                                            <html><i>Web Site</i>: <a href='https://dennisturco.github.io/'>https://dennisturco.github.io/ </a></html>""",
            "Credits",
            JOptionPane.PLAIN_MESSAGE, icon); // pop-up message
    }//GEN-LAST:event_MenuCreditsActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void MenuHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuHistoryActionPerformed
        System.out.println("Event --> history");
        try {
            new ProcessBuilder("notepad.exe", INFO_FILE_DIRECTORY_STRING+"log_file").start();
        } catch (IOException e) {
            // Gestione dell'eccezione in modo più robusto
            JOptionPane.showMessageDialog(null, "Error opening history file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_MenuHistoryActionPerformed

    private void MenuClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuClearActionPerformed
        System.out.println("Event --> clear");
        startPathField.setText("");
        destinationPathField.setText("");
        messageLabel.setText("");
        lastBackupLabel.setText("");
    }//GEN-LAST:event_MenuClearActionPerformed

    private void MenuRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuRemoveActionPerformed
        System.out.println("Event --> remove file");

        // get the name of the selected file
        String filename = getFile(SAVES_DIRECTORY_STRING);
        if (filename == null) return;

        RemoveBackupFile(filename);
    }//GEN-LAST:event_MenuRemoveActionPerformed
    
    private void RemoveBackupFile(String filename) {
        // delete
        File file = new File(SAVES_DIRECTORY_STRING + filename);
        if (file.delete()) {
            System.out.println("Event --> file deleted: " + file.getName());
            JOptionPane.showMessageDialog(this, "File '" + filename + "' deleted successfully!", "File deleted", JOptionPane.INFORMATION_MESSAGE);
        }
        else {
            System.out.println("Failed to delete the file.");
            return;
        }
        
        // backup list update
        for (Backup backup : backups) {
            if (filename.equals(backup.getFilename())) {
                backups.remove(backup);
                JSON.UpdateBackupListJSON(BACKUP_FILE_STRING, INFO_FILE_DIRECTORY_STRING, backups);
                updateTableWithNewBackupList(backups);
                break;
            }
        }
    }
    
    private void MenuSaveWithNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSaveWithNameActionPerformed
        SaveWithName();
    }//GEN-LAST:event_MenuSaveWithNameActionPerformed

    private void MenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSaveActionPerformed
        System.out.println("Event --> save");
        if (currentFileOpened == null) {
            SaveWithName();
        }

        try {
            Backup backup = JSON.WriteJSONFile(currentFileOpened, SAVES_DIRECTORY_STRING);
            for (Backup b : backups) {
                if (b.getFilename().equals(backup.getFilename())) {
                    b.UpdateBackup(backup);
                    JSON.UpdateBackupListJSON(BACKUP_FILE_STRING, INFO_FILE_DIRECTORY_STRING, backups);
                    updateTableWithNewBackupList(backups);
                    break;
                }
            }
        } catch (IllegalArgumentException e) {
            System.err.println("Exception --> " + e);
        }

        JSON.LoadJSONBackupList();
    }//GEN-LAST:event_MenuSaveActionPerformed

    private void MenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuOpenActionPerformed
        System.out.println("Event --> open");

        // get the name of the selected file
        currentFileOpened = getFile(SAVES_DIRECTORY_STRING);

        OpenFile();
    }//GEN-LAST:event_MenuOpenActionPerformed

    private void OpenFile() {
        // read from json file
        try {
            JSON.ReadJSONFile(currentFileOpened, SAVES_DIRECTORY_STRING);
        } catch (IllegalArgumentException ex) {
            System.err.println("Exception --> " + ex);
        }
    }
    
    private void MenuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuNewActionPerformed
        MenuClearActionPerformed(evt);

        // basic auto enable is disabled
        autoBackupOption = false;
        setAutoBackupPreference(autoBackupOption);

        // I remove the current open file
        currentFileLabel.setText("");

        setCurrentFileName("untitled*");
    }//GEN-LAST:event_MenuNewActionPerformed

    private void AutoBackupPreferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoBackupPreferenceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AutoBackupPreferenceActionPerformed

    private void AutoBackupPreferenceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AutoBackupPreferenceMouseReleased
        // case when the state didn't change
        if (AutoBackupPreference.isSelected() == autoBackupOption) return;

        if (AutoBackupPreference.isSelected() && AutomaticBackup()) {
            System.out.println("Event --> Auto Backup setted to Enabled");
            AutoBackupPreference.setSelected(true);
            autoBackupOption = true;
        }
        else {
            System.out.println("Event --> Auto Backup setted to Disabled");
            AutoBackupPreference.setSelected(false);
            autoBackupOption = false;
        }
    }//GEN-LAST:event_AutoBackupPreferenceMouseReleased

    private void AutoBackupPreferenceStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_AutoBackupPreferenceStateChanged

    }//GEN-LAST:event_AutoBackupPreferenceStateChanged

    private void SingleBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SingleBackupActionPerformed
        SingleBackup();
    }//GEN-LAST:event_SingleBackupActionPerformed

    private void btnPathSearch2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPathSearch2ActionPerformed
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Choose a directory to save your file: ");
        jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        int returnValue = jfc.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            if (jfc.getSelectedFile().isDirectory()) {
                System.out.println("You selected the directory: " + jfc.getSelectedFile());
                destinationPathField.setText(jfc.getSelectedFile().toString());
            }
        }
    }//GEN-LAST:event_btnPathSearch2ActionPerformed

    private void destinationPathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationPathFieldActionPerformed

    }//GEN-LAST:event_destinationPathFieldActionPerformed

    private void btnPathSearch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPathSearch1ActionPerformed
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Choose a directory to save your file: ");
        jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

        int returnValue = jfc.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            if (jfc.getSelectedFile().isDirectory()) {
                System.out.println("You selected the directory: " + jfc.getSelectedFile());
                startPathField.setText(jfc.getSelectedFile().toString());
            }
        }
    }//GEN-LAST:event_btnPathSearch1ActionPerformed

    private void startPathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPathFieldActionPerformed

    }//GEN-LAST:event_startPathFieldActionPerformed
    
    public void setAutoBackupPreference(boolean option) {
        // case when the state didn't change
        if (option == autoBackupOption) return;
         
        if (option) {
            AutoBackupPreference.setSelected(true);
            autoBackupOption = true;
        }
        else {
            AutoBackupPreference.setSelected(false);
            autoBackupOption = false;
        }
        
    }
    
    // it returns true if is correctly setted, false otherwise
    public boolean AutomaticBackup() {
        System.out.println("Event --> automatic backup");
        
        try {
            if (currentFileOpened != null) JSON.ReadJSONFile(INFO_FILE_STRING, INFO_FILE_DIRECTORY_STRING);

            if(!CheckInputCorrect()) return false;

            // if the file has not been saved you need to save it before setting the auto backup
            if(autoBackupOption == false) {
                if (currentFileOpened == null) SaveWithName();
                if (currentFileOpened == null) return false;

                // message
                daysIntervalBackup = Integer.parseInt(JOptionPane.showInputDialog(null, "Every how many days run the auto backup?")); // pop-up message
                if (daysIntervalBackup == JOptionPane.CANCEL_OPTION) return false;

                //set date for next backup
                dateNow = LocalDate.now();
                nextDateBackup = dateNow.plusDays(daysIntervalBackup).format(formatter).toString();
                System.out.println("Event --> Next date backup setted to " + nextDateBackup);

                JOptionPane.showMessageDialog(null, "Auto Backup has been activated\n\tFrom: " + startPathField.getText() + "\n\tTo: " + destinationPathField.getText() + "\nIs setted every " + daysIntervalBackup + " days", "AutoBackup", 1);
            }

            // save to JSON file
            Backup backup = JSON.WriteJSONFile(currentFileOpened, SAVES_DIRECTORY_STRING);
            for (Backup b : backups) {
                if (b.getFilename().equals(backup.getFilename())) {
                    b.UpdateBackup(backup);
                    JSON.UpdateBackupListJSON(BACKUP_FILE_STRING, INFO_FILE_DIRECTORY_STRING, backups);
                    updateTableWithNewBackupList(backups);
                    break;
                }
            }
            JSON.LoadJSONBackupList(); // backup list update
            return true;
        } catch (Exception ex) {
            return false;
        }
    }
    
    private void SaveWithName() {
        System.out.println("Event --> save with name");
        System.out.println(System.getProperty("user.dir"));

        String file_name;
        do {
            file_name = JOptionPane.showInputDialog(null, "Name of the file"); // pop-up message
            if (file_name == null) return;
        } while (file_name.equals("null") ||  file_name.equals("null*"));	
        if (file_name.isEmpty()) return;

        currentFileOpened = file_name;

        currentFileOpened += ".json";

        try {
            Backup backup = JSON.WriteJSONFile(currentFileOpened, SAVES_DIRECTORY_STRING);
            backups.add(backup);
            JSON.UpdateBackupListJSON(BACKUP_FILE_STRING, INFO_FILE_DIRECTORY_STRING, backups);
            updateTableWithNewBackupList(backups);
            JOptionPane.showMessageDialog(this, "File '" + file_name + "' saved successfully!", "File saved", JOptionPane.INFORMATION_MESSAGE);
        } catch (IllegalArgumentException e) {
            System.err.println("Exception --> " + e);
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Error saving file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void SingleBackup() {
        System.out.println("Event --> single backup");
		
        String temp = "\\";

        //------------------------------INPUT CONTROL ERRORS------------------------------
        if(CheckInputCorrect() == false) return;

        //------------------------------TO GET THE CURRENT DATE------------------------------
        dateNow = LocalDate.now();

        //------------------------------SET ALL THE VARIABLES------------------------------
        String path1 = startPathField.getText();
        String path2 = destinationPathField.getText();
        String name1; // folder name/initial file
        String date = formatter.format(dateNow);

        //------------------------------SET ALL THE STRINGS------------------------------
        name1 = path1.substring(path1.length()-1, path1.length()-1);

        for(int i=path1.length()-1; i>=0; i--) {
                if(path1.charAt(i) != temp.charAt(0)) name1 = path1.charAt(i) + name1;
                else break;
        }

        path2 = path2 + "\\" + name1 + " (Backup " + date + ")";

        //------------------------------COPY THE FILE OR DIRECTORY------------------------------
        System.out.println("date backup: " + date);
    	
        // if current_file_opened is null it means I'm not in a backup but it's a backup with no associated json file so I don't save the string last_backup
        if (currentFileOpened != null) { 
            setStringToText();
        }
        
        try {
            copyDirectoryFileVisitor(path1, path2);
        } catch (IOException e) {
            System.err.println("Exception --> " + e);
            JOptionPane.showMessageDialog(null, "Error during the backup operation: the initial path is incorrect!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } 
		
        createMessagePopUp("AutoBackup", "Files Copied!\nFrom: " + startPathField.getText() + "\nTo: " + destinationPathField.getText(), ".//res//info.png");
        
        messageLabel.setForeground(Color.GREEN);
        
        // next day backup update
        if (autoBackupOption == true) {
            nextDateBackup = dateNow.plusDays(daysIntervalBackup).format(formatter).toString();
        } 
        
        // if current_file_opened is null it means they are not in a backup but it is a backup with no associated json file
        try {
            if (currentFileOpened != null) { 
                JSON.WriteJSONFile(INFO_FILE_STRING, INFO_FILE_DIRECTORY_STRING);
                Backup backup = JSON.WriteJSONFile(currentFileOpened, SAVES_DIRECTORY_STRING);
                for (Backup b : backups) {
                    if (b.getFilename().equals(backup.getFilename())) {
                        b.UpdateBackup(backup);
                        JSON.UpdateBackupListJSON(BACKUP_FILE_STRING, INFO_FILE_DIRECTORY_STRING, backups);
                        updateTableWithNewBackupList(backups);
                        break;
                    }
                }
                JSON.LoadJSONBackupList(); // backup list update
            }
        } catch (IllegalArgumentException e) {
            System.err.println("Exception --> " + e);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error saving file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        
        //attivo il timer di n secondi
        threadTimer = new TimerAutoBackup(); //TODO: noon so se va bene, in teoria dovrei passare qualcosa
        threadTimer.startTimer();
        messageLabel.setText("Files Copied!");
    }
    
    public void autoBackupControl() {
        File directory = new File(SAVES_DIRECTORY_STRING);
        File[] listOfFiles = directory.listFiles();

        dateNow = LocalDate.now();

        for (int i=0; i<directory.list().length; i++) {
            try {
                JSON.ReadJSONFile(listOfFiles[i].getName(), SAVES_DIRECTORY_STRING);
            } catch (IllegalArgumentException ex) {
                System.err.println("Exception --> " + ex);
            }

            if (nextDateBackup != null && autoBackupOption == true) {
                LocalDate time_next = LocalDate.parse(nextDateBackup);

                if (time_next.compareTo(dateNow) <= 0) {
                    SingleBackup(); // start backup
                }
            }
        }
        JSON.LoadJSONBackupList(); // backup list update
    }
    
    public void setCurrentFileName(String name) {
        currentFileLabel.setText(" Current File:  " + name);
    }
    
    private static String getFile(String directory_path) {
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Choose a file to open: ");
        jfc.setCurrentDirectory(new java.io.File(directory_path));
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int returnValue = jfc.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            if (jfc.getSelectedFile().isFile()) {
                System.out.println("You selected the file: " + jfc.getSelectedFile());

                // from the absolute path I get the name 
                int counter = 0;
                for (long i=jfc.getSelectedFile().toString().length()-1; i>=0; i--) {
                    if (jfc.getSelectedFile().toString().charAt((int) i) != '\\') counter++;
                    else break;
                }

                return jfc.getSelectedFile().toString().substring(jfc.getSelectedFile().toString().length()-counter);
            }
        }
        return null;
    }
    
    public void UpdateProgressBar(int value) {
        progressBar.setValue(value);
    }
   
	
    public static boolean getAutoBackupOption(String option) {
        return option.equals("Auto Backup (Enabled)");
    }
	
    public void setStringToText() {
        try {
            LocalDateTime dateNow = LocalDateTime.now();
            String last_date = formatterLastBackup.format(dateNow);
            lastBackupLabel.setText("last backup: " + last_date);

            JSON.WriteJSONFile(INFO_FILE_STRING, INFO_FILE_DIRECTORY_STRING);
        } catch (IllegalArgumentException e) {
            System.err.println("Exception --> " + e);
        } catch(Exception e) {
            System.err.println("Exception --> " + e);
        }
    }
	
    public void setTextValues() {
        try {
            JSON.ReadJSONFile(INFO_FILE_STRING, INFO_FILE_DIRECTORY_STRING);
        } catch (IllegalArgumentException ex) {
            System.err.println("Exception --> " + ex);
        }

        autoBackupOption = daysIntervalBackup != null;

        setAutoBackupPreference(autoBackupOption);
    }
	
    public boolean CheckInputCorrect() {
        String temp = "\\";

        //check if inputs are null
        if(startPathField.getText().length() == 0 || destinationPathField.getText().length() == 0) {
            setMessageError("Input Missing!");
            return false;
        }

        //check if there is a \ char
        boolean check1 = false;
        boolean check2 = false;

        for(int i=0; i<startPathField.getText().length(); i++) {
            if(startPathField.getText().charAt(i) == temp.charAt(0)) check1 = true;
        }

        for(int i=0; i<destinationPathField.getText().length(); i++) {
            if(destinationPathField.getText().charAt(i) == temp.charAt(0)) check2 = true;
        }

        if(check1 != true || check2 != true) {
            setMessageError("Input Error!");
            return false;
        }

        return true;
    }
	
    private void setMessageError(String error_type) {
        System.err.println("Error --> " + error_type);
        messageLabel.setForeground(Color.RED);
        messageLabel.setText(error_type);
        messageLabel.setVisible(true);

        // start timer of n seconds
        threadTimer = new TimerAutoBackup(this);
        threadTimer.startTimer();
    }
	
    public void copyDirectoryFileVisitor(String source, String target) throws IOException {
        try {
            int totalFilesCount = countFilesInDirectory(new File(source));  // Calculating the total number of files to be copied

            // Create and start the thread for copying files
            Thread copyThread = new Thread(() -> {
                TreeCopyFileVisitor fileVisitor = new TreeCopyFileVisitor(source, target, totalFilesCount, new FileCopyListener() {
                    private int copiedFilesCount = 0;

                    @Override
                    public void onFileCopied(int progress) {
                        UpdateProgressBar(progress);
                        copiedFilesCount++;
                        // Update progress with the actual number of files copied
                        int actualProgress = (int) (((double) copiedFilesCount / totalFilesCount) * 100);
                        UpdateProgressBar(actualProgress);
                    }
                });
                try {
                    Files.walkFileTree(Paths.get(source), fileVisitor);
                } catch (IOException e) {
                }
            });

            copyThread.start(); // Thread for copying files
        } catch (Exception ex) {
            throw new IOException();
        }
    }
	
    public static void createMessagePopUp(String title, String message, String icon_path) {  
        JOptionPane pane = new JOptionPane(message);
        JDialog dialog = pane.createDialog(title);
        dialog.setModal(false);
        dialog.setVisible(true);
        
        if (icon_path != null) {
            ImageIcon icon = new ImageIcon(icon_path);
            dialog.setIconImage(icon.getImage());
        } 
    }
    
    public static int countFilesInDirectory(File directory) {
    	int count = 0;
    	
    	for (File file : directory.listFiles()) {
            if (file.isFile()) {
                    count++;
            }

            if (file.isDirectory()) {
                    count += countFilesInDirectory(file);
            }
    	} 	
    	return count;
    }
    
    public static void main(String args[]) {
        // Theme selection
        try {
            UIManager.setLookAndFeel(new FlatIntelliJLaf());
        } catch (Exception ex) {
            System.err.println("Exception --> " + ex);
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AutoBackupGUI().setVisible(true);
            }
        });
    }
    
    
    public String GetStartPathField() {
        return startPathField.getText();
    }
    public String GetDestinationPathField() {
        return destinationPathField.getText();
    }
    public String GetLastBackupLabel() {
        return lastBackupLabel.getText();
    }
    public Boolean GetAutomaticBackupPreference() {
        return AutoBackupPreference.isSelected();
    }
    public void SetStartPathField(String text) {
        startPathField.setText(text);
    }
    public void SetDestinationPathField(String text) {
        destinationPathField.setText(text);
    }
    public void SetLastBackupLabel(String text) {
        lastBackupLabel.setText(text);
    }
    public void SetMessageLabel(boolean value) {
        messageLabel.setVisible(value);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AutoBackupPreference;
    private javax.swing.JMenuItem MenuClear;
    private javax.swing.JMenuItem MenuCredits;
    private javax.swing.JMenuItem MenuHelp;
    private javax.swing.JMenuItem MenuHistory;
    private javax.swing.JMenuItem MenuNew;
    private javax.swing.JMenuItem MenuOpen;
    private javax.swing.JMenuItem MenuQuit;
    private javax.swing.JMenuItem MenuRemove;
    private javax.swing.JMenuItem MenuSave;
    private javax.swing.JMenuItem MenuSaveWithName;
    private javax.swing.JMenuItem MenuShare;
    private javax.swing.JButton SingleBackup;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JButton btnPathSearch1;
    private javax.swing.JButton btnPathSearch2;
    private javax.swing.JLabel currentFileLabel;
    private javax.swing.JTextField destinationPathField;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lastBackupLabel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField startPathField;
    private javax.swing.JTable table;
    private javax.swing.JLabel txtTitle;
    // End of variables declaration//GEN-END:variables
}